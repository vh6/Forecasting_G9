by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Vaud <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.V = predicted_gdp$y
)
print(GDP.Vaud)
#Merging the datasets
str(Vaud_df_nocovid$Date)
str(payerne_weather$Date)
str(GDP.Vaud$Date)
df_weather_merged <- Vaud_df_nocovid |>
left_join(payerne_weather |>  dplyr::select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Vaud, by = "Date")
str(final_merged_data)
Canton.Vaud <- final_merged_data %>%
group_by(Jahr) %>%
mutate(
GDP.Jan = first(GDP.V[Monat == "January"], default = NA_real_)
) %>%
mutate(
GDP.V = if_else(Monat != "January", NA_real_, GDP.V),
GDP.V = if_else(is.na(GDP.V), GDP.Jan, GDP.V)
) %>%
dplyr::select(-GDP.Jan)
# Regulating the Date variable to be possible to merge the datasets
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
vaud_df_nocovid <- vaud_df_nocovid %>%
mutate(Date = as.Date(paste0(format(date, "%Y-%m"), "-01"))) %>%
dplyr::select(-date)
GDP.Vaud$Date <- as.Date(paste(GDP.Vaud$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
missing_years <- as.Date(c("2005-01-01", "2006-01-01", "2007-01-01", "2022-01-01", "2023-01-01"))
known_years <- unique(GDP.Vaud$Date)
known_gdp <- GDP.Vaud$GDP.V[match(known_years, GDP.Vaud$Date)]
full_years <- seq(from = min(c(known_years, missing_years)),
to = max(c(known_years, missing_years)),
by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Vaud <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.V = predicted_gdp$y
)
# Merging the datasets
vaud_df_weather_merged <- vaud_df_nocovid |>
left_join(payerne_weather |>  dplyr::select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(vaud_df_weather_merged, GDP.Vaud, by = "Date")
Canton.Vaud <- final_merged_data %>%
group_by(Jahr) %>%
mutate(
GDP.Jan = first(GDP.V[Monat == "January"], default = NA_real_)
) %>%
mutate(
GDP.V = if_else(Monat != "January", NA_real_, GDP.V),
GDP.V = if_else(is.na(GDP.V), GDP.Jan, GDP.V)
) %>%
dplyr::select(-GDP.Jan) %>%
fill(GDP.V, .direction = "downup")
# Regulating the Date variable to be possible to merge the datasets
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
Vaud_df_nocovid <- vaud_df_nocovid %>%
mutate(Date = as.Date(paste0(format(date, "%Y-%m"), "-01"))) %>%
dplyr::select(-date)
# Regulating the Date variable to be possible to merge the datasets
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
Vaud_df_nocovid <- vaud_df_nocovid %>%
mutate(Date = as.Date(paste0(format(date, "%Y-%m"), "-01"))) %>%
dplyr::select(-date)
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
library(feasts)
setwd("C:/Users/Hp/OneDrive/Desktop/forecasting I")
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
library(feasts)
setwd("~/GitHub/Forecasting_G9/Project 1")
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
payerne_weather <- read.csv("payerne.weather.csv")
GDP.Vaud <- read.csv("Gdp.Vaud.csv")
Lugano_weather <- read.csv("Lugano.weather.csv")
GDP.Ticino <- read.csv("Gdp.Ticino.csv")
# Translate Monat column to English
german_months <- c("Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
#sum(is.na(df$Jahr)) # 0 NAs
#sum(is.na(df$Monat)) # 0 NAs
#sum(is.na(df$date)) # 0 NAs
##sum(is.na(df$value)) # 51395 NAs
#sum(is.na(df$Kanton)) # 0 NAs
#sum(is.na(df$Herkunftsland)) # 0 NAs
# Subset dataframe to remove nationalities and cantons, and keep totals.
vaud_df <- df[df$Herkunftsland == "Herkunftsland - Total" & df$Kanton == "Vaud", ]
# Transform df to tsibble
vaud_df <- tsibble(vaud_df, index = date)
# Plot visitors
vaud_df |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Subset dataframe
ticino_df <- df[df$Herkunftsland == "Philippinen" & df$Kanton == "Ticino", ]
# Transform df to tsibble
ticino_df <- tsibble(ticino_df, index = date)
# Plot visitors
ticino_df |> autoplot(value) +
ggtitle("Monthly visitors to Ticino from the Philippines") +
ylab("Visitors") +
xlab("Months")
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
vaud_df$covid <- ifelse(vaud_df$date >= ymd("2020-03-01") & vaud_df$date <= ymd("2022-02-01"), 1, 0)
# Create no covid tsibble
vaud_df_nocovid <- vaud_df
vaud_df_nocovid$value[vaud_df_nocovid$covid == 1] <- NA
#df_nocovid |> autoplot(value) +
#  ggtitle("Monthly visitors to Vaud") +
#  ylab("Visitors") +
#  xlab("Months")
# Since the COVID period is exactly 2 years, we can try to "stick" the before and after values together, so we have a time series without gaps, and this won't affect seasonality.
# Drop covid rows
vaud_df_nocovid <- vaud_df_nocovid[vaud_df_nocovid$covid != 1, ]
# Add 2 years from data before covid
vaud_df_nocovid$date[vaud_df_nocovid$date < ymd("2022-03-01")] <- vaud_df_nocovid$date[vaud_df_nocovid$date < ymd("2022-03-01")] + years(2)
vaud_df_nocovid <- tsibble(vaud_df_nocovid, index = date)
vaud_df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
ticino_df$covid <- ifelse(ticino_df$date >= ymd("2020-03-01") & ticino_df$date <= ymd("2022-02-01"), 1, 0)
# Create no covid tsibble
ticino_df_nocovid <- ticino_df
ticino_df_nocovid$value[ticino_df_nocovid$covid == 1] <- NA
#df_nocovid |> autoplot(value) +
#  ggtitle("Monthly visitors to ticino") +
#  ylab("Visitors") +
#  xlab("Months")
# Since the COVID period is exactly 2 years, we can try to "stick" the before and after values together, so we have a time series without gaps, and this won't affect seasonality.
# Drop covid rows
ticino_df_nocovid <- ticino_df_nocovid[ticino_df_nocovid$covid != 1, ]
# Add 2 years from data before covid
ticino_df_nocovid$date[ticino_df_nocovid$date < ymd("2022-03-01")] <- ticino_df_nocovid$date[ticino_df_nocovid$date < ymd("2022-03-01")] + years(2)
ticino_df_nocovid <- tsibble(ticino_df_nocovid, index = date)
ticino_df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Ticino from the Philippines") +
ylab("Visitors") +
xlab("Months")
# Now we can run models on the data without gaps and reset the dates afterwards.
# Automatic ARIMA model
vaud_df_nocovid$date <- yearmonth(vaud_df_nocovid$date)
vaud_df_nocovid <- tsibble(vaud_df_nocovid, index = date)
vaud_fit <- vaud_df_nocovid |> model(ARIMA(value))
report(vaud_fit)
vaud_fc <- vaud_fit |> forecast(h = "15 months")
vaud_fc |> autoplot(vaud_df) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Now we can run models on the data without gaps and reset the dates afterwards.
# Automatic ARIMA model
ticino_df_nocovid$date <- yearmonth(ticino_df_nocovid$date)
ticino_df_nocovid <- tsibble(ticino_df_nocovid, index = date)
ticino_fit <- ticino_df_nocovid |> model(ARIMA(value))
report(ticino_fit)
ticino_fc <- ticino_fit |> forecast(h = "15 months")
ticino_fc |> autoplot(ticino_df) +
ggtitle("Forecast of monthly visitors to ticino") +
ylab("Visitors") +
xlab("Months")
# Regulating the Date variable to be possible to merge the datasets
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
Vaud_df_nocovid <- vaud_df_nocovid %>%
mutate(Date = as.Date(paste0(format(date, "%Y-%m"), "-01"))) %>%
dplyr::select(-date)
GDP.Vaud$Date <- as.Date(paste(GDP.Vaud$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
missing_years <- as.Date(c("2005-01-01", "2006-01-01", "2007-01-01", "2022-01-01", "2023-01-01"))
known_years <- unique(GDP.Vaud$Date)
known_gdp <- GDP.Vaud$GDP.V[match(known_years, GDP.Vaud$Date)]
full_years <- seq(from = min(c(known_years, missing_years)),
to = max(c(known_years, missing_years)),
by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Vaud <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.V = predicted_gdp$y
)
print(GDP.Vaud)
#Merging the datasets
str(Vaud_df_nocovid$Date)
str(payerne_weather$Date)
str(GDP.Vaud$Date)
df_weather_merged <- Vaud_df_nocovid |>
left_join(payerne_weather |>  dplyr::select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Vaud, by = "Date")
str(final_merged_data)
Canton.Vaud <- final_merged_data %>%
group_by(Jahr) %>%
mutate(
GDP.Jan = first(GDP.V[Monat == "January"], default = NA_real_)
) %>%
mutate(
GDP.V = if_else(Monat != "January", NA_real_, GDP.V),
GDP.V = if_else(is.na(GDP.V), GDP.Jan, GDP.V)
) %>%
dplyr::select(-GDP.Jan)
Canton.Vaud<- Canton.Vaud %>%
fill(GDP.V, .direction = "downup")
#Fitting an automatic ARIMA model and plotting the forecast
Canton.Vaud$Date <- yearmonth(Canton.Vaud$Date)
Canton.Vaud_ts <- as_tsibble(Canton.Vaud, index = Date, key = Kanton)
fit <- Canton.Vaud_ts |>
model(ARIMA(value ~ GDP.V + Temperature + Precipitation))
report(fit)
#We repeat the process to plot the forecast
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
df <- vaud_df%>%
mutate(Date = as.Date(paste0(format(date, "%Y-%m"), "-01"))) %>%
dplyr::select(-date)
GDP.Vaud$Date <- as.Date(paste(GDP.Vaud$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
missing_years <- as.Date(c("2005-01-01", "2006-01-01", "2007-01-01", "2022-01-01", "2023-01-01"))
known_years <- unique(GDP.Vaud$Date)
known_gdp <- GDP.Vaud$GDP.V[match(known_years, GDP.Vaud$Date)]
full_years <- seq(from = min(c(known_years, missing_years)),
to = max(c(known_years, missing_years)),
by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Vaud <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.V = predicted_gdp$y
)
print(GDP.Vaud)
#Merging the datasets
str(df$Date)
str(payerne_weather$Date)
str(GDP.Vaud$Date)
df_weather_merged <- df |>
left_join(payerne_weather |>  dplyr::select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Vaud, by = "Date")
str(final_merged_data)
Canton.Vaud <- final_merged_data %>%
group_by(Jahr) %>%
mutate(
GDP.Jan = first(GDP.V[Monat == "January"], default = NA_real_)
) %>%
mutate(
GDP.V = if_else(Monat != "January", NA_real_, GDP.V),
GDP.V = if_else(is.na(GDP.V), GDP.Jan, GDP.V)
) %>%
dplyr::select(-GDP.Jan)
Canton.Vaud<- Canton.Vaud %>%
fill(GDP.V, .direction = "downup")
#Fitting an automatic ARIMA model and plotting the forecast
Canton.Vaud$Date <- yearmonth(Canton.Vaud$Date)
Canton.Vaud_ts <- as_tsibble(Canton.Vaud, index = Date, key = Kanton)
# Forecast for 15 months ahead using the model
future_exogenous <- new_data(Canton.Vaud_ts, n = 15) %>%
mutate(
GDP.V = mean(Canton.Vaud_ts$GDP.V, na.rm = TRUE),  # Using mean for future values as example
Temperature = mean(Canton.Vaud_ts$Temperature, na.rm = TRUE),
Precipitation = mean(Canton.Vaud_ts$Precipitation, na.rm = TRUE)
)
fc <- fit |> forecast(new_data = future_exogenous)
autoplot(fc, Canton.Vaud_ts) +
ggtitle("Forecast of Monthly Values for Canton Vaud with ARIMA Model") +
ylab("Forecasted Value") +
xlab("Date")
# Regulating the Date variable to be possible to merge the datasets
Lugano_weather$Date <- as.Date(paste(Lugano_weather$Year, Lugano_weather$Month, "1", sep = "-"), "%Y-%m-%d")
Ticino_df_nocovid <- ticino_df_nocovid %>%
mutate(Date = as.Date(date)) %>%
select(-date)
GDP.Ticino$Date <- as.Date(paste(GDP.Ticino$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
known_years <- GDP.Ticino$Date
known_gdp <- GDP.Ticino$GDP.T
missing_years <- as.Date(c("2005-01-01", "2006-01-01", "2007-01-01", "2022-01-01", "2023-01-01"))
full_years <- seq(min(c(known_years, missing_years)), max(c(known_years, missing_years)), by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Ticino <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.T = predicted_gdp$y
)
print(GDP.Ticino)
# Merging the datasets
str(Ticino_df_nocovid$Date)
str(Lugano_weather$Date)
str(GDP.Ticino$Date)
df_weather_merged <- Ticino_df_nocovid %>%
left_join(Lugano_weather %>% select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Ticino, by = "Date")
str(final_merged_data)
Canton.Ticino <- final_merged_data %>%
group_by(Jahr) %>%
mutate(
GDP.Jan = first(GDP.T[Monat == "January"], default = NA_real_)
) %>%
mutate(
GDP.T = if_else(Monat != "January", NA_real_, GDP.T),
GDP.T = if_else(is.na(GDP.T), GDP.Jan, GDP.T)
) %>%
select(-GDP.Jan)
Canton.Ticino <- Canton.Ticino %>%
fill(GDP.T, .direction = "downup")
# Fitting an automatic ARIMA model and plotting the forecast
Canton.Ticino$Date <- yearmonth(Canton.Ticino$Date)
Canton.Ticino_ts <- as_tsibble(Canton.Ticino, index = Date, key = Kanton)
fit <- Canton.Ticino_ts %>%
model(ARIMA(value ~ GDP.T + Temperature + Precipitation))
report(fit)
# We repeat the process to plot the forecast
Lugano_weather$Date <- as.Date(paste(Lugano_weather$Year, Lugano_weather$Month, "1", sep = "-"), "%Y-%m-%d")
df <- ticino_df %>%
mutate(Date = as.Date(date)) %>%
select(-date)
GDP.Ticino$Date <- as.Date(paste(GDP.Ticino$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
known_years <- GDP.Ticino$Date
known_gdp <- GDP.Ticino$GDP.T
full_years <- seq(min(c(known_years, missing_years)), max(c(known_years, missing_years)), by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Ticino <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.T = predicted_gdp$y
)
print(GDP.Ticino)
# Merging the datasets
str(df$Date)
str(Lugano_weather$Date)
str(GDP.Ticino$Date)
df_weather_merged <- df %>%
left_join(Lugano_weather %>% select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Ticino, by = "Date")
str(final_merged_data)
Canton.Ticino <- final_merged_data %>%
group_by(Jahr) %>%
mutate(
GDP.Jan = first(GDP.T[Monat == "January"], default = NA_real_)
) %>%
mutate(
GDP.T = if_else(Monat != "January", NA_real_, GDP.T),
GDP.T = if_else(is.na(GDP.T), GDP.Jan, GDP.T)
) %>%
select(-GDP.Jan)
Canton.Ticino <- Canton.Ticino %>%
fill(GDP.T, .direction = "downup")
# Fitting an automatic ARIMA model and plotting the forecast
Canton.Ticino$Date <- yearmonth(Canton.Ticino$Date)
Canton.Ticino_ts <- as_tsibble(Canton.Ticino, index = Date, key = Kanton)
# Forecast for 15 months ahead using the model
future_exogenous <- new_data(Canton.Ticino_ts, n = 15) %>%
mutate(
GDP.T = mean(Canton.Ticino_ts$GDP.T, na.rm = TRUE),
Temperature = mean(Canton.Ticino_ts$Temperature, na.rm = TRUE),
Precipitation = mean(Canton.Ticino_ts$Precipitation, na.rm = TRUE)
)
fc <- fit %>% forecast(new_data = future_exogenous)
autoplot(fc, Canton.Ticino_ts) +
ggtitle("Forecast of Monthly Values for Canton Ticino for Filipino visitors") +
ylab("Forecasted Value") +
xlab("Date")
library(knitr)
# Ensure there are no NA values left in the datasets
Canton.Vaud_ts <- Canton.Vaud_ts %>%
mutate(across(everything(), ~replace_na(., 0)))
Canton.Ticino_ts <- Canton.Ticino_ts %>%
mutate(across(everything(), ~replace_na(., 0)))
# Check if there are any NA values left
print(sum(is.na(Canton.Vaud_ts))) # should be 0
print(sum(is.na(Canton.Ticino_ts))) # should be 0
# Split the data into training and testing sets
train_end <- yearmonth("2022 Sep")
test_start <- yearmonth("2022 Oct")
# Vaud data
vaud_train <- filter(Vaud_df_nocovid, Date <= train_end)
vaud_test <- filter(Vaud_df_nocovid, Date >= test_start)
# Fit the ARIMA model without exogenous variables on training data for Vaud
vaud_fit_arima <- vaud_train %>% model(ARIMA(value))
vaud_fc_arima <- vaud_fit_arima %>% forecast(new_data = vaud_test)
# Fit the ARIMA model with exogenous variables on training data for Vaud
Canton.Vaud_train <- filter(Canton.Vaud_ts, Date <= train_end)
Canton.Vaud_test <- filter(Canton.Vaud_ts, Date >= test_start)
vaud_fit_arima_exo <- Canton.Vaud_train %>% model(ARIMA(value ~ GDP.V + Temperature + Precipitation))
vaud_fc_arima_exo <- vaud_fit_arima_exo %>% forecast(new_data = Canton.Vaud_test)
# Fit the ETS model on training data for Vaud
vaud_fit_ets <- vaud_train %>% model(ETS(value))
vaud_fc_ets <- vaud_fit_ets %>% forecast(new_data = vaud_test)
# Calculate accuracy metrics for Vaud
accuracy_arima <- accuracy(vaud_fc_arima, vaud_test)
accuracy_arima_exo <- accuracy(vaud_fc_arima_exo, Canton.Vaud_test)
accuracy_ets <- accuracy(vaud_fc_ets, vaud_test)
# Create data frames for accuracy metrics
vaud_arima_metrics <- data.frame(
Model = "ARIMA without exogenous variables",
ME = accuracy_arima$ME,
RMSE = accuracy_arima$RMSE,
MAE = accuracy_arima$MAE,
MPE = accuracy_arima$MPE,
MAPE = accuracy_arima$MAPE,
MASE = accuracy_arima$MASE,
RMSSE = accuracy_arima$RMSSE,
ACF1 = accuracy_arima$ACF1
)
vaud_arimax_metrics <- data.frame(
Model = "ARIMA with exogenous variables",
ME = accuracy_arima_exo$ME,
RMSE = accuracy_arima_exo$RMSE,
MAE = accuracy_arima_exo$MAE,
MPE = accuracy_arima_exo$MPE,
MAPE = accuracy_arima_exo$MAPE,
MASE = accuracy_arima_exo$MASE,
RMSSE = accuracy_arima_exo$RMSSE,
ACF1 = accuracy_arima_exo$ACF1
)
vaud_ets_metrics <- data.frame(
Model = "ETS model",
ME = accuracy_ets$ME,
RMSE = accuracy_ets$RMSE,
MAE = accuracy_ets$MAE,
MPE = accuracy_ets$MPE,
MAPE = accuracy_ets$MAPE,
MASE = accuracy_ets$MASE,
RMSSE = accuracy_ets$RMSSE,
ACF1 = accuracy_ets$ACF1
)
# Combine data frames for Vaud
vaud_metrics_combined <- rbind(vaud_arima_metrics, vaud_arimax_metrics, vaud_ets_metrics)
# Ticino data
ticino_train <- filter(Ticino_df_nocovid, Date <= train_end)
ticino_test <- filter(Ticino_df_nocovid, Date >= test_start)
# Fit the ARIMA model without exogenous variables on training data for Ticino
ticino_fit_arima <- ticino_train %>% model(ARIMA(value))
ticino_fc_arima <- ticino_fit_arima %>% forecast(new_data = ticino_test)
# Fit the ARIMA model with exogenous variables on training data for Ticino
Canton.Ticino_train <- filter(Canton.Ticino_ts, Date <= train_end)
Canton.Ticino_test <- filter(Canton.Ticino_ts, Date >= test_start)
ticino_fit_arima_exo <- Canton.Ticino_train %>% model(ARIMA(value ~ GDP.T + Temperature + Precipitation))
ticino_fc_arima_exo <- ticino_fit_arima_exo %>% forecast(new_data = Canton.Ticino_test)
# Fit the ETS model on training data for Ticino
ticino_fit_ets <- ticino_train %>% model(ETS(value))
ticino_fc_ets <- ticino_fit_ets %>% forecast(new_data = ticino_test)
# Calculate accuracy metrics for Ticino
accuracy_arima_ticino <- accuracy(ticino_fc_arima, ticino_test)
accuracy_arima_exo_ticino <- accuracy(ticino_fc_arima_exo, Canton.Ticino_test)
accuracy_ets_ticino <- accuracy(ticino_fc_ets, ticino_test)
# Create data frames for accuracy metrics
ticino_arima_metrics <- data.frame(
Model = "ARIMA without exogenous variables",
ME = accuracy_arima_ticino$ME,
RMSE = accuracy_arima_ticino$RMSE,
MAE = accuracy_arima_ticino$MAE,
MPE = accuracy_arima_ticino$MPE,
MAPE = accuracy_arima_ticino$MAPE,
MASE = accuracy_arima_ticino$MASE,
RMSSE = accuracy_arima_ticino$RMSSE,
ACF1 = accuracy_arima_ticino$ACF1
)
ticino_arimax_metrics <- data.frame(
Model = "ARIMA with exogenous variables",
ME = accuracy_arima_exo_ticino$ME,
RMSE = accuracy_arima_exo_ticino$RMSE,
MAE = accuracy_arima_exo_ticino$MAE,
MPE = accuracy_arima_exo_ticino$MPE,
MAPE = accuracy_arima_exo_ticino$MAPE,
MASE = accuracy_arima_exo_ticino$MASE,
RMSSE = accuracy_arima_exo_ticino$RMSSE,
ACF1 = accuracy_arima_exo_ticino$ACF1
)
ticino_ets_metrics <- data.frame(
Model = "ETS model",
ME = accuracy_ets_ticino$ME,
RMSE = accuracy_ets_ticino$RMSE,
MAE = accuracy_ets_ticino$MAE,
MPE = accuracy_ets_ticino$MPE,
MAPE = accuracy_ets_ticino$MAPE,
MASE = accuracy_ets_ticino$MASE,
RMSSE = accuracy_ets_ticino$RMSSE,
ACF1 = accuracy_ets_ticino$ACF1
)
# Combine data frames for Ticino
ticino_metrics_combined <- rbind(ticino_arima_metrics, ticino_arimax_metrics, ticino_ets_metrics)
# Display accuracy metrics as tables
print("Accuracy Metrics for Vaud:")
kable(vaud_metrics_combined, format = "markdown")
print("Accuracy Metrics for Ticino:")
kable(ticino_metrics_combined, format = "markdown")
