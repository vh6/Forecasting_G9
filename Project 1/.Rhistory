print(GDP.Vaud)
#Merging the datasets
str(df$Date)
#Merging the datasets
str(df$date)
str(Payerne_weather$Date)
str(GDP.Vaud$Date)
df_weather_merged <- df |>
left_join(Payerne_weather |>  select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Vaud, by = "Date")
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
# Translate Monat column to English
german_months <- c("Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
sum(is.na(df$Jahr)) # 0 NAs
sum(is.na(df$Monat)) # 0 NAs
sum(is.na(df$date)) # 0 NAs
sum(is.na(df$value)) # 51395 NAs
sum(is.na(df$Kanton)) # 0 NAs
sum(is.na(df$Herkunftsland)) # 0 NAs
# Subset dataframe to remove nationalities and cantons, and keep totals.
df <- df[df$Herkunftsland == "Herkunftsland - Total" & df$Kanton == "Vaud", ]
# Transform df to tsibble
df <- tsibble(df, index = date)
# Plot visitors
df |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
df$covid <- ifelse(df$date >= ymd("2020-03-01") & df$date <= ymd("2022-02-01"), 1, 0)
# Create no covid tsibble
df_nocovid <- df
df_nocovid$value[df_nocovid$covid == 1] <- NA
df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Drop covid rows
df_nocovid <- df_nocovid[df_nocovid$covid != 1, ]
# Add 2 years from data before covid
df_nocovid$date[df_nocovid$date < ymd("2022-03-01")] <- df_nocovid$date[df_nocovid$date < ymd("2022-03-01")] + years(2)
df_nocovid <- tsibble(df_nocovid, index = date)
df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Automatic ARIMA model
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
fit <- df_nocovid |> model(ARIMA(value))
report(fit)
fc <- fit |> forecast(h = "15 months")
fc |> autoplot(df_nocovid) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Plot model on original data
df$date <- yearmonth(df$date)
fc |> autoplot(df) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
#Firstly we will start will visitors of Vaud
payerne_weather <- read.csv("payerne.weather.csv")
GDP.Vaud <- read.csv("Gdp.Vaud.csv")
#Regulating the Date variable to be possible to merge the 3 dataset
#Including years with prediction in GDP.Vaud because the dataset had infomation from 2008-2021
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
df <- df |>
mutate(Date = as.Date(date)) |>
select(-date)
GDP.Vaud$Date <- as.Date(paste(GDP.Vaud$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
known_years <- GDP.Vaud$Date
known_gdp <- GDP.Vaud$GDP.V
missing_years <- as.Date(c("2005-01-01", "2006-01-01", "2007-01-01", "2022-01-01", "2023-01-01"))
full_years <- seq(min(c(known_years, missing_years)), max(c(known_years, missing_years)), by = "year")
predicted_gdp <- spline(x = known_years, y = known_gdp, xout = full_years)
GDP.Vaud <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.V = predicted_gdp$y)
print(GDP.Vaud)
#Merging the datasets
str(df$Date)
str(payerne_weather$Date)
str(GDP.Vaud$Date)
df_weather_merged <- df |>
left_join(payerne_weather |>  select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Vaud, by = "Date")
str(final_merged_data)
Canton.Vaud <- final_merged_data |>
group_by(Jahr) |>
mutate(
GDP.Jan = GDP.V[Monat == "January"]
) |>
mutate(
GDP.V = if_else(Monat != "January", NA_real_, GDP.V),
GDP.V = if_else(is.na(GDP.V), GDP.Jan, GDP.V)
) |>
select(-GDP.Jan)
# Creating a scatterplot matrix to see the relationship btw exogenous variables and the visitors
scatterplot_matrix <- ggplot(Canton.Vaud, aes(x = Temperature, y = Precipitation)) +
geom_point(aes(color = GDP.V, size = value)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Temperature", y = "Precipitation", color = "GDP.V", size = "Visitors") +
ggtitle("Relationship between Temperature, Precipitation, GDP, and Visitors to Vaud") +
theme_minimal()
print(scatterplot_matrix)
#Fitting an automatic ARIMA model and plotting the forecast
Canton.Vaud$Date <- yearmonth(Canton.Vaud$Date)
Canton.Vaud_ts <- as_tsibble(Canton.Vaud, index = Date, key = Kanton)
fit <- Canton.Vaud_ts |>
model(ARIMA(value ~ GDP.V + Temperature + Precipitation))
report(fit)
# Forecast for 15 months ahead using the model
future_exogenous <- new_data(Canton.Vaud_ts, n = 15) %>%
mutate(
GDP.V = mean(Canton.Vaud_ts$GDP.V, na.rm = TRUE),  # Using mean for future values as example
Temperature = mean(Canton.Vaud_ts$Temperature, na.rm = TRUE),
Precipitation = mean(Canton.Vaud_ts$Precipitation, na.rm = TRUE)
)
fc <- fit |> forecast(new_data = future_exogenous)
autoplot(fc, Canton.Vaud_ts) +
ggtitle("Forecast of Monthly Values for Canton Vaud with ARIMA Model") +
ylab("Forecasted Value") +
xlab("Date")
# Load packages
library(tidyverse)
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
# Translate Monat column to English
german_months <- c("Januar", "Februar", "März", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
sum(is.na(df$Jahr)) # 0 NAs
sum(is.na(df$Monat)) # 0 NAs
sum(is.na(df$date)) # 0 NAs
sum(is.na(df$value)) # 51395 NAs
sum(is.na(df$Kanton)) # 0 NAs
sum(is.na(df$Herkunftsland)) # 0 NAs
View(df)
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
# Translate Monat column to English
german_months <- c("Januar", "Februar", "März", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
View(df)
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
sum(is.na(df$Jahr)) # 0 NAs
sum(is.na(df$Monat)) # 0 NAs
sum(is.na(df$date)) # 0 NAs
sum(is.na(df$value)) # 51395 NAs
sum(is.na(df$Kanton)) # 0 NAs
sum(is.na(df$Herkunftsland)) # 0 NAs
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
# Translate Monat column to English
german_months <- c("Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
sum(is.na(df$Jahr)) # 0 NAs
sum(is.na(df$Monat)) # 0 NAs
sum(is.na(df$date)) # 0 NAs
sum(is.na(df$value)) # 51395 NAs
sum(is.na(df$Kanton)) # 0 NAs
sum(is.na(df$Herkunftsland)) # 0 NAs
# Subset dataframe to remove nationalities and cantons, and keep totals.
df <- df[df$Herkunftsland == "Herkunftsland - Total" & df$Kanton == "Vaud", ]
# Transform df to tsibble
df <- tsibble(df, index = date)
# Plot visitors
df |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
df$covid <- ifelse(df$date >= ymd("2020-03-01") & df$date <= ymd("2022-02-01"), 1, 0)
# Create no covid tsibble
df_nocovid <- df
df_nocovid$value[df_nocovid$covid == 1] <- NA
df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
View(df)
# Drop covid rows
df_nocovid <- df_nocovid[df_nocovid$covid != 1, ]
# Add 2 years from data before covid
df_nocovid$date[df_nocovid$date < ymd("2022-03-01")] <- df_nocovid$date[df_nocovid$date < ymd("2022-03-01")] + years(2)
df_nocovid <- tsibble(df_nocovid, index = date)
df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# STL decomposition (EDA)
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
df_stl <- df_nocovid %>% model(STL(value))
components(df_stl) %>% autoplot()
# STL decomposition (EDA)
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
df_stl <- df_nocovid %>% model(STL(value))
# ACF plot
df_nocovid <- df_nocovid %>% mutate(diff_value = difference(value))
df_nocovid %>% autoplot(diff_value)
p1 <- df_nocovid %>% ACF(value) %>% autoplot()
p2 <- df_nocovid %>% ACF(diff_value) %>% autoplot()
p1 + p2
p1 <- df_nocovid %>% ACF(value) %>% autoplot()
p2 <- df_nocovid %>% ACF(diff_value) %>% autoplot()
p1 + p2
# Automatic ARIMA model
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
fit <- df_nocovid |> model(ARIMA(value))
report(fit)
# Automatic ARIMA model
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
fit <- df_nocovid |> model(ARIMA(value))
report(fit)
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(fpp3)
install.packages("fable")
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
install.packages(fable)
install.packages("fable")
library(fpp3)
# Load packages
library(tidyverse)
library(lubridate)
library(fpp3)
library(stats)
library(dplyr)
library(ggplot2)
library(fable)
library(tsibble)
library(fabletools)
library(patchwork)
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
# Translate Monat column to English
german_months <- c("Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
sum(is.na(df$Jahr)) # 0 NAs
sum(is.na(df$Monat)) # 0 NAs
sum(is.na(df$date)) # 0 NAs
sum(is.na(df$value)) # 51395 NAs
sum(is.na(df$Kanton)) # 0 NAs
sum(is.na(df$Herkunftsland)) # 0 NAs
# Subset dataframe to remove nationalities and cantons, and keep totals.
df <- df[df$Herkunftsland == "Herkunftsland - Total" & df$Kanton == "Vaud", ]
# Transform df to tsibble
df <- tsibble(df, index = date)
# Plot visitors
df |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
df$covid <- ifelse(df$date >= ymd("2020-03-01") & df$date <= ymd("2022-02-01"), 1, 0)
# Create no covid tsibble
df_nocovid <- df
df_nocovid$value[df_nocovid$covid == 1] <- NA
df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Drop covid rows
df_nocovid <- df_nocovid[df_nocovid$covid != 1, ]
# Add 2 years from data before covid
df_nocovid$date[df_nocovid$date < ymd("2022-03-01")] <- df_nocovid$date[df_nocovid$date < ymd("2022-03-01")] + years(2)
df_nocovid <- tsibble(df_nocovid, index = date)
df_nocovid |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# STL decomposition (EDA)
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
df_stl <- df_nocovid %>% model(STL(value))
components(df_stl) %>% autoplot()
# ACF plot
df_nocovid <- df_nocovid %>% mutate(diff_value = difference(value))
df_nocovid %>% autoplot(diff_value)
p1 <- df_nocovid %>% ACF(value) %>% autoplot()
p2 <- df_nocovid %>% ACF(diff_value) %>% autoplot()
p1 + p2
# Automatic ARIMA model
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
fit <- df_nocovid |> model(ARIMA(value))
report(fit)
fc <- fit |> forecast(h = "15 months")
fc |> autoplot(df_nocovid) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
install.packages("urca")
library(urca)
# Automatic ARIMA model
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
fit <- df_nocovid |> model(ARIMA(value))
report(fit)
fc <- fit |> forecast(h = "15 months")
fc |> autoplot(df_nocovid) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Plot model on original data
df$date <- yearmonth(df$date)
fc |> autoplot(df) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Automatic ARIMA model
df_nocovid$date <- yearmonth(df_nocovid$date)
df_nocovid <- tsibble(df_nocovid, index = date)
fit <- df_nocovid |> model(ARIMA(value))
report(fit)
fc <- fit |> forecast(h = "15 months")
fc |> autoplot(df_nocovid) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Plot model on original data
df$date <- yearmonth(df$date)
fc |> autoplot(df) +
ggtitle("Forecast of monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Load data
df <- read.csv("Dataset_tourism.csv", stringsAsFactors = FALSE)
# Translate Monat column to English
german_months <- c("Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni",
"Juli", "August", "September", "Oktober", "November", "Dezember")
english_months <- month.name
# Replace German month names with English month names
df$Monat <- factor(df$Monat, levels = german_months, labels = english_months)
# Check if any month translations have failed leading to NAs
if(any(is.na(df$Monat))) {
warning("NA values found in month translation. Check 'Monat' levels and labels.")
}
df$date <- ymd(paste(df$Jahr, df$Monat, "01", sep = "-"))
if(any(is.na(df$date))) {
warning("NA values found in 'date' creation. Check 'Jahr', 'Monat' concatenation.")
}
# Count NAs
sum(is.na(df$Jahr)) # 0 NAs
sum(is.na(df$Monat)) # 0 NAs
sum(is.na(df$date)) # 0 NAs
sum(is.na(df$value)) # 51395 NAs
sum(is.na(df$Kanton)) # 0 NAs
sum(is.na(df$Herkunftsland)) # 0 NAs
#Firstly we will start will visitors of Vaud
payerne_weather <- read.csv("payerne.weather.csv")
GDP.Vaud <- read.csv("Gdp.Vaud.csv")
#Regulating the Date variable to be possible to merge the 3 dataset
#Including years with prediction in GDP.Vaud because the dataset had infomation from 2008-2021
payerne_weather$Date <- as.Date(paste(payerne_weather$Year, payerne_weather$Month, "1", sep = "-"), "%Y-%m-%d")
GDP.Vaud$Date <- as.Date(paste(GDP.Vaud$Date, "01", "01", sep = "-"), format = "%Y-%m-%d")
missing_years <- as.Date(c("2005-01-01", "2006-01-01", "2007-01-01", "2022-01-01", "2023-01-01"))
known_years <- unique(GDP.Vaud$Date)
known_gdp <- GDP.Vaud$GDP.V[match(known_years, GDP.Vaud$Date)]
full_years <- seq(from = min(c(known_years, missing_years)),
to = max(c(known_years, missing_years)),
by = "year")
predicted_gdp <- spline(x = as.numeric(known_years), y = known_gdp, xout = as.numeric(full_years))
GDP.Vaud <- data.frame(
Date = as.Date(paste(full_years, "-01-01", sep = "")),
GDP.V = predicted_gdp$y
)
print(GDP.Vaud)
#Merging the datasets
str(df_nocovid$Date)
str(payerne_weather$Date)
str(GDP.Vaud$Date)
df_weather_merged <- df_nocovid |>
left_join(payerne_weather |>  select(Date, Temperature, Precipitation), by = "Date")
final_merged_data <- left_join(df_weather_merged, GDP.Vaud, by = "Date")
str(final_merged_data)
df_weather_merged <- df_nocovid |>
left_join(payerne_weather |>  select(date, Temperature, Precipitation), by = "Date")
df_weather_merged <- df_nocovid |>
left_join(payerne_weather |>  select(Date, Temperature, Precipitation), by = "date")
# Exploratory Data Analysis (EDA)
```{r, echo = FALSE, message = FALSE}
(here::here("scripts/setup.R"))
# Subset dataframe to remove nationalities and cantons, and keep totals.
df <- df[df$Herkunftsland == "Herkunftsland - Total" & df$Kanton == "Vaud", ]
# Transform df to tsibble
df <- tsibble(df, index = date)
# Plot visitors
df |> autoplot(value) +
ggtitle("Monthly visitors to Vaud") +
ylab("Visitors") +
xlab("Months")
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
df$covid <- ifelse(df$date >= ymd("2020-03-01") & df$date <= ymd("2022-02-01"), 1, 0)
# Add dummy variable covid, set to 1 between March 2020 and Feb 2022, 0 everywhere else.
df$covid <- ifelse(df$date >= ymd("2020-03-01") & df$date <= ymd("2022-02-01"), 1, 0)
PrixPopCrimeYearChomInt_vf <- ("/Users/victorregly/MyDoc/University/Master/Management/DATA/FINAL_WORK/DSFBA/dataset_vf/PrixPopCrimeYear_vf.csv")
```{r, echo = TRUE}
PrixPopCrimeYearChomInt_vf <- ("/Users/victorregly/MyDoc/University/Master/Management/DATA/FINAL_WORK/DSFBA/dataset_vf/PrixPopCrimeYear_vf.csv")
library(ggplot2)
library(dplyr)
